import axios from 'axios';

// Create axios instance with base configuration
const api = axios.create({
  baseURL: import.meta.env.VITE_API_URL || 'https://localhost:7203/api',
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json',
  },
});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // Token expired or invalid\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      window.location.href = '/login';\n    }\n    \n    return Promise.reject({\n      message: error.response?.data?.message || error.message,\n      status: error.response?.status,\n      data: error.response?.data,\n    });\n  }\n);\n\n// Auth API\nexport const authAPI = {\n  login: async (credentials) => {\n    const response = await api.post('/auth/login', credentials);\n    return response.data;\n  },\n  \n  register: async (userData) => {\n    const response = await api.post('/auth/register', userData);\n    return response.data;\n  },\n  \n  logout: async () => {\n    await api.post('/auth/logout');\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n  },\n  \n  getProfile: async () => {\n    const response = await api.get('/auth/profile');\n    return response.data;\n  },\n  \n  forgotPassword: async (email) => {\n    const response = await api.post('/auth/forgot-password', { email });\n    return response.data;\n  },\n  \n  resetPassword: async (token, newPassword) => {\n    const response = await api.post('/auth/reset-password', { token, newPassword });\n    return response.data;\n  },\n};\n\n// Blog API\nexport const blogAPI = {\n  getAllPosts: async (params = {}) => {\n    const response = await api.get('/blogposts', { params });\n    return response.data;\n  },\n  \n  getPost: async (id) => {\n    const response = await api.get(`/blogposts/${id}`);\n    return response.data;\n  },\n  \n  createPost: async (postData) => {\n    const response = await api.post('/blogposts', postData);\n    return response.data;\n  },\n  \n  updatePost: async (id, postData) => {\n    const response = await api.put(`/blogposts/${id}`, postData);\n    return response.data;\n  },\n  \n  deletePost: async (id) => {\n    await api.delete(`/blogposts/${id}`);\n  },\n};\n\n// Power BI API\nexport const powerBIAPI = {\n  getAllReports: async () => {\n    const response = await api.get('/powerbi/reports');\n    return response.data;\n  },\n  \n  getReport: async (id) => {\n    const response = await api.get(`/powerbi/reports/${id}`);\n    return response.data;\n  },\n};\n\n// Contact API\nexport const contactAPI = {\n  sendMessage: async (messageData) => {\n    const response = await api.post('/contact', messageData);\n    return response.data;\n  },\n};\n\n// Feedback API\nexport const feedbackAPI = {\n  submitFeedback: async (feedbackData) => {\n    const response = await api.post('/feedback', feedbackData);\n    return response.data;\n  },\n  \n  getFeedback: async (params = {}) => {\n    const response = await api.get('/feedback', { params });\n    return response.data;\n  },\n};\n\n// Health check\nexport const healthAPI = {\n  check: async () => {\n    const response = await api.get('/health');\n    return response.data;\n  },\n};\n\nexport default api;
